@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

@implements IAsyncDisposable

@inject IJSRuntime JS

@{
    var deleteDisabledClass = _selectedItem == null ? "disabled" : "";
    var downloadDisabledClass = _selectedItem == null || _selectedItem.File!.Type == FileManagerItemType.Folder ? "disabled" : "";
}

<div class="card @_additionalClass" style="@_additionalStyle">
    <div class="card-header card-header-clean">

        <div class="btn-group" role="group">
            <button class="btn btn-secondary" type="button">
                <i class="bi bi-folder-plus"></i>
            </button>
            <button class="btn btn-secondary @deleteDisabledClass" @onclick="DeleteSelectedItemAsync" type="button">
                <i class="bi bi-trash"></i>
            </button>
        </div>

        <div class="btn-group" role="group">
            <button class="btn btn-secondary" @onclick="RefreshAsync" type="button">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
            <button class="btn btn-secondary @downloadDisabledClass" @onclick="DownloadSelectedFileAsync" type="button">
                <i class="bi bi-download"></i>
            </button>
            <button class="btn btn-secondary" @onclick="OpenUploadFileDialog" type="button">
                <i class="bi bi-upload"></i>
            </button>
        </div>
        <InputFile id="hiddenFileInput" OnChange="OnFileInput" style="display: none;"></InputFile>
    </div>
    <div class="card-body p-0 overflow-hidden">
        <div class="row m-0 h-100">

            <div class="col col-auto">
            </div>

            <div class="col card p-0 card-clean h-100">

                <div class="card-header card-header-clean">
                    <div class="hstack gap-2 align-items-center">
                        <div class="cursor-pointer" @onclick="OnDirectoryUpClick">
                            <i class="bi bi-arrow-90deg-up"></i>
                        </div>
                        <div class="vr"></div>
                        <span class="text-secondary">@GetBreadcrumbPath()</span>
                    </div>
                </div>

                <div class="card-body row row-cols-auto overflow-auto m-0">
                        @foreach (var file in _files) {
                            <div class="col">
                                <FileManagerItem @key="file.Name" OnClick="OnItemClicked" File="file"></FileManagerItem>
                            </div>
                        }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public IFileSystemProvider? FileSystemProvider { get; set; }

    [Parameter]
    public EventCallback<FileManagerDownloadRequestEventArgs> OnDownloadRequested { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    private string _path = ".";
    private IEnumerable<FileManagerFile> _files = [];
    private FileManagerItem? _selectedItem;

    private string _additionalClass = "";
    private string _additionalStyle = "";
    private IJSObjectReference? _module;



    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync() {

        if (FileSystemProvider != null)
            // Show files of the root path
            _files = await FileSystemProvider.ListDirectoryAsync(_path);
    }



    /// <summary>
    /// 
    /// </summary>
    protected override void OnParametersSet() {
        // Get the "class" attribute, if given
        if (AdditionalAttributes != null && AdditionalAttributes.TryGetValue("class", out var attribute)) {
            _additionalClass = attribute.ToString() ?? string.Empty;
        }

        // Get the "style" attribute, if given
        if (AdditionalAttributes != null && AdditionalAttributes.TryGetValue("style", out var styleAttr)) {
            _additionalStyle = styleAttr.ToString() ?? string.Empty;
        }

        base.OnParametersSet();
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) _module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Brandgroup.BlazorExtensions.Bootstrap/Components/FileManager/FileManager.razor.js");
    }



    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    async ValueTask IAsyncDisposable.DisposeAsync() {
        if (_module is not null) {
            try {
                await _module.DisposeAsync();
            } catch (JSDisconnectedException) {
            }
        }
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnItemClicked(FileManagerItemClickEventArgs args) {
        var clickedItem = args.Item;

        // Deselect previous item
        if (_selectedItem != null && _selectedItem != clickedItem)
            _selectedItem.Selected = false;

        // Toggle selection
        if (_selectedItem == clickedItem && clickedItem.Selected) {
            // Item was already selected → treat as double-click

            if (FileSystemProvider == null) return;

            if (clickedItem.File?.Type == FileManagerItemType.Folder) {
                var path = Path.Combine(_path, clickedItem.File.Name);
                await NavigateDirectory(path);

                // Cancel the selection of the current item when navigation was successful
                _selectedItem.Selected = false;
                _selectedItem = null;
            } else {
                await DownloadFileAsync(clickedItem.File);
            }
        } else {
            // Item was not selected → select it

            _selectedItem = clickedItem;
        }
    }



    /// <summary>
    /// Downloads a file using the FileSystemProvider and JavaScript interop to stream the file to the user. After that, raises the OnDownloadRequested event.
    /// </summary>
    /// <param name="file"></param>
    /// <returns></returns>
    private async Task DownloadFileAsync(FileManagerFile file) {
        var stream = FileSystemProvider.GetFileStream(file);
        using var streamRef = new DotNetStreamReference(stream);
        await _module!.InvokeVoidAsync("downloadFileFromStream", file.Name, streamRef); // This calls follows Microsoft's Blazor example for downloading files: https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-9.0#download-from-a-stream

        var newArgs = new FileManagerDownloadRequestEventArgs(file);
        if (OnDownloadRequested.HasDelegate) {
            await OnDownloadRequested.InvokeAsync(newArgs);
        }
    }



    /// <summary>
    ///
    /// </summary>
    private async Task DownloadSelectedFileAsync() {
        if (_selectedItem?.File == null || _selectedItem.File!.Type == FileManagerItemType.Folder) return;

        // If a file is selected, download it
        await DownloadFileAsync(_selectedItem.File);
    }



    /// <summary>
    ///
    /// </summary>
    private async Task OpenUploadFileDialog() {
        await _module!.InvokeVoidAsync("clickElement", "hiddenFileInput");
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="obj"></param>
    private async Task OnFileInput(InputFileChangeEventArgs obj) {

        if (FileSystemProvider == null) return;

        // Upload the file to the current directory
        await FileSystemProvider.UploadFileAsync(_path, obj.File);
    }


    /// <summary>
    ///
    /// </summary>
    private async Task OnDirectoryUpClick() {

        // Cancel the selection of the current item
        if (_selectedItem != null) {
            _selectedItem.Selected = false;
            _selectedItem = null;
        }

        var path = (!string.IsNullOrEmpty(Path.GetDirectoryName(_path)) ? Path.GetDirectoryName(_path) : ".")!;
        await NavigateDirectory(path);
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="path"></param>
    /// <returns></returns>
    private async Task NavigateDirectory(string path) {
        _path = path;
        _files = await FileSystemProvider.ListDirectoryAsync(path);
    }



    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private string GetBreadcrumbPath() {
        return _path.Replace(@"\", "  /  ");
    }



    /// <summary>
    ///
    /// </summary>
    private async Task RefreshAsync() {
        _files = await FileSystemProvider?.ListDirectoryAsync(_path);
    }



    /// <summary>
    ///
    /// </summary>
    private async Task DeleteSelectedItemAsync() {

        if (_selectedItem?.File == null) return;

        var confirmed = await JS.InvokeAsync<bool>("confirm", $"Are you sure that you want to delete {_selectedItem.File.Name}?");
        if (!confirmed) return;

        await FileSystemProvider?.DeleteItemAsync(_selectedItem.File);
        _selectedItem = null;

    }

}
