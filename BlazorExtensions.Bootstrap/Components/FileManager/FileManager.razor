@using Microsoft.JSInterop

@implements IAsyncDisposable

@inject IJSRuntime JS

<div class="card">
    <div class="card-header">

        <div class="btn-group" role="group">
        </div>

        <div class="btn-group" role="group">
            <button class="btn btn-secondary" type="button">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
            <button class="btn btn-secondary" type="button">
                <i class="bi bi-download"></i>
            </button>
            <button class="btn btn-secondary" type="button">
                <i class="bi bi-upload"></i>
            </button>
        </div>
    </div>
    <div class="card-body p-0">
        <div class="row m-0">

            <div class="col col-auto">
            </div>

            <div class="col card p-0">

                <div class="card-header">
                </div>

                <div class="card-body row row-cols-auto">

                    @foreach (var item in _items) {
                        <div class="col">
                            <FileManagerItem OnClick="OnItemClicked" Item="item"></FileManagerItem>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>

</div>

@code {

    [Parameter]
    public IFileSystemProvider? FileSystemProvider { get; set; }

    [Parameter]
    public EventCallback<FileManagerDownloadRequestEventArgs> OnDownloadRequest { get; set; }

    private IEnumerable<FileManagerFile> _items = [];

    private IJSObjectReference? _module;

    protected override async Task OnInitializedAsync() {
        _items = await FileSystemProvider.ListDirectoryAsync("");
    }

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            //_module = await JS.InvokeAsync<IJSObjectReference>("import", "/content/Brandgroup.BlazorExtensions.Bootstrap/Components/FileManager/FileManager.razor.js");
        }
    }


    async ValueTask IAsyncDisposable.DisposeAsync() {
        if (_module is not null) {
            try {
                await _module.DisposeAsync();
            } catch (JSDisconnectedException) {
            }
        }
    }


    private async Task OnItemClicked(FileManagerItemClickEventArgs args) {
        var obj = args.Object;

        if (!obj.Selected) return;

        // Download item
        var stream = FileSystemProvider.GetFileStream(obj.Item);
        await DownloadFileFromStreamAsync(obj.Item.Name, stream);



    }


    /// <summary>
    ///
    /// </summary>
    /// <param name="fileName"></param>
    /// <param name="stream"></param>
    /// <returns></returns>
    private async Task DownloadFileFromStreamAsync(string fileName, Stream stream) {
        using var streamRef = new DotNetStreamReference(stream: stream);
        //await _module.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef); // This calls follows Microsoft's Blazor example for downloading files: https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-9.0#download-from-a-stream
        await JS.InvokeVoidAsync("window.downloadHelper.downloadFileFromStream", fileName, streamRef); // This calls follows Microsoft's Blazor example for downloading files: https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-9.0#download-from-a-stream

    }

}
