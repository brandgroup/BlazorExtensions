@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.JSInterop

@implements IAsyncDisposable

@inject IJSRuntime JS

@{
    var downloadDisabledClass = (_selectedItem == null || _selectedItem.File!.Type == FileManagerItemType.Folder) ? "disabled" : "";
}

<div class="card">
    <div class="card-header">

        <div class="btn-group" role="group">
        </div>

        <div class="btn-group" role="group">
            <button class="btn btn-secondary" type="button">
                <i class="bi bi-arrow-clockwise"></i>
            </button>
            <button class="btn btn-secondary @downloadDisabledClass" type="button">
                <i class="bi bi-download"></i>
            </button>
            <button class="btn btn-secondary" type="button" @onclick="OnUploadClick">
                <i class="bi bi-upload"></i>
            </button>
        </div>
        <InputFile id="hiddenFileInput" OnChange="OnFileInput" style="display: none;"></InputFile>
    </div>
    <div class="card-body p-0">
        <div class="row m-0">

            <div class="col col-auto">
            </div>

            <div class="col card p-0">

                <div class="card-header">
                    <div class="hstack gap-2 align-items-center">

                        <div class="vr"></div>
                        <span class="text-secondary">@GetBeautifulPath()</span>
                    </div>
                    
                </div>

                <div class="card-body row row-cols-auto">

                    @foreach (var file in _files) {
                        <div class="col">
                            <FileManagerItem OnClick="OnItemClicked" File="file"></FileManagerItem>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public IFileSystemProvider? FileSystemProvider { get; set; }

    [Parameter]
    public EventCallback<FileManagerDownloadRequestEventArgs> OnDownloadRequest { get; set; }

    private string _path = ".";
    private IEnumerable<FileManagerFile> _files = [];
    private FileManagerItem? _selectedItem;

    private IJSObjectReference? _module;



    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    protected override async Task OnInitializedAsync() {

        if (FileSystemProvider != null)
            // Show files of the root path
            _files = await FileSystemProvider.ListDirectoryAsync(_path);

    }



    /// <summary>
    /// 
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) _module = await JS.InvokeAsync<IJSObjectReference>("import", "./_content/Brandgroup.BlazorExtensions.Bootstrap/Components/FileManager/FileManager.razor.js");

    }



    /// <summary>
    /// 
    /// </summary>
    /// <returns></returns>
    async ValueTask IAsyncDisposable.DisposeAsync() {
        if (_module is not null) {
            try {
                await _module.DisposeAsync();
            } catch (JSDisconnectedException) {
            }
        }
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="args"></param>
    /// <returns></returns>
    private async Task OnItemClicked(FileManagerItemClickEventArgs args) {
        var item = args.Item;

        // If another item is already selected, unselect that
        if (_selectedItem != null && _selectedItem != item) {
            _selectedItem.Selected = false;
        }

        _selectedItem = item;

        if (!item.Selected || FileSystemProvider == null) return;
        // If that item is already selected, do action

        if (item.File!.Type == FileManagerItemType.Folder) {
            // Navigate to folder
            _path = Path.Combine(_path, item.File.Name);
            _files = await FileSystemProvider.ListDirectoryAsync(_path);

        } else {
            // Download item
            var stream = FileSystemProvider.GetFileStream(item.File);
            await DownloadFileFromStreamAsync(item.File.Name, stream);
        }
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="fileName"></param>
    /// <param name="stream"></param>
    /// <returns></returns>
    private async Task DownloadFileFromStreamAsync(string fileName, Stream stream) {
        using var streamRef = new DotNetStreamReference(stream);
        await _module!.InvokeVoidAsync("downloadFileFromStream", fileName, streamRef); // This calls follows Microsoft's Blazor example for downloading files: https://learn.microsoft.com/en-us/aspnet/core/blazor/file-downloads?view=aspnetcore-9.0#download-from-a-stream

    }



    /// <summary>
    ///
    /// </summary>
    private async Task OnUploadClick() {
        await _module!.InvokeVoidAsync("clickElement", "hiddenFileInput");
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="obj"></param>
    private void OnFileInput(InputFileChangeEventArgs obj) {

    }

    private string GetBeautifulPath() {
        return _path.Replace(@"\", "  /  ");
    }

}
