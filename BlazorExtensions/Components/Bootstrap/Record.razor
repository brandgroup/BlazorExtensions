@using Brandgroup.BlazorExtensions.Components.Events
@using Microsoft.AspNetCore.Components.Web

@{
    var styleString = Clickable ? "width: 18rem; cursor: pointer;" : "width: 18rem;";
    var cardSelectClass = Selected ? "border-dark border-2" : string.Empty;
}

<div class="card shadow-sm rounded-3 @cardSelectClass" style="@styleString" @onclick="OnCardClick">
    <!-- Card Header-->
    <div class="card-header p-1 ps-3 pt-2 pe-2">
        <div class="d-flex align-items-center m-0 p-0">
            <div class="d-flex me-auto align-items-center">
                <div class="text-seconardy m-0" style="font-size: 0.75rem;">@MiniTitle</div>
                <h5 class="m-0">@Title</h5>
            </div>
            <div class="bi @Icon h3 m-0 p-0">
            </div>
        </div>
    </div>

    <!-- Card Body-->
    <div class="card-body pe-2">
        @ChildContent
        <div class="d-flex flex-row-reverse gap-2">

            @* Remove Record button *@
            <button class="btn btn-outline-danger p-1" style="z-index: 2;" @onclick:stopPropagation="true" @onclick="OnDeleteBtnClick">
                <div class="bi bi-trash h5 m-0 p-0"></div>
            </button>

            @* Edit Record button *@
            @if (Editable) {
                <button class="btn btn-outline-primary p-1" style="z-index: 2;" @onclick:stopPropagation="true" @onclick="OnEditBtnClick">
                    <div class="bi bi-pencil h5 m-0 p-0"></div>
                </button>
            }
        </div>

    </div>
</div>



@code {
    [Parameter]
    public int? Id { get; set; }

    [Parameter]
    public string? MiniTitle { get; set; }

    [Parameter]
    public string? Title { get; set; }

    [Parameter]
    public object? Tag { get; set; }

    [Parameter]
    public string Icon { get; set; } = string.Empty;

    [Parameter]
    public bool Clickable { get; set; } = false;

    [Parameter]
    public bool Selectable { get; set; } = false;

    [Parameter]
    public bool Editable { get; set; } = false;

    [Parameter]
    public bool Selected { get; set; } = false;

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public EventCallback<RecordEventArgs> OnEditClick { get; set; }

    [Parameter]
    public EventCallback<RecordEventArgs> OnDeleteClick { get; set; }

    [Parameter]
    public EventCallback<RecordEventArgs> OnClick { get; set; }

    [Parameter]
    public EventCallback<RecordSelectEventArgs> OnSelectChanged { get; set; }


    /// <summary>
    ///
    /// </summary>
    /// <param name="e"></param>
    private async Task OnEditBtnClick(MouseEventArgs e) {
        if (Editable)
            await OnEditClick.InvokeAsync(new RecordEventArgs(this));
    }

    private async Task OnDeleteBtnClick(MouseEventArgs e) {
        await OnDeleteClick.InvokeAsync(new RecordEventArgs(this));
    }



    /// <summary>
    ///
    /// </summary>
    /// <returns></returns>
    private async Task OnCardClick() {
        if (Clickable) {
            await OnClick.InvokeAsync(new RecordEventArgs(this));
            if (Selectable) {
                Selected = !Selected;
                await OnSelectChanged.InvokeAsync(new RecordSelectEventArgs(this, Selected));
            }
        }
    }

}
