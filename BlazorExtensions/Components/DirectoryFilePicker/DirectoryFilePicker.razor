@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.JSInterop

@inject IJSRuntime Js



<InputFile @ref="_inputFileRef" @attributes="@AdditionalAttributes" OnChange="@HandleFileSelection" multiple webkitdirectory />

<script>
    window.getFileList = (inputFile) => {
        const fileList = [];

        for (let i = 0; i < inputFile.files.length; i++) {
            fileList.push(inputFile.files[i].webkitRelativePath);
        }

        return fileList;
    };
</script>



@code {

    [Parameter]
    public int MaximumFileCount { get; set; } = 10;

    [Parameter]
    public EventCallback<FilePickerSelectedEventArgs> OnFilesSelected { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private InputFile? _inputFileRef;



    /// <summary>
    ///
    /// </summary>
    /// <param name="evtArgs"></param>
    /// <returns></returns>
    private async Task HandleFileSelection(InputFileChangeEventArgs evtArgs) {
        if (_inputFileRef == null || !_inputFileRef.Element.HasValue) return;

        //Invoke JavaScript from C#
        var fileRelativePaths = await Js.InvokeAsync<string[]>("getFileList", _inputFileRef.Element.Value);

        //Fetch files from InputFile
        var files = evtArgs.GetMultipleFiles(MaximumFileCount);

        //Combine uploaded files with relative file paths
        var browserFilesWithPaths = fileRelativePaths.ToList().Select((relativePath, index) => new BrowserFileWithPath(files[index], relativePath));

        await OnFilesSelected.InvokeAsync(new FilePickerSelectedEventArgs(browserFilesWithPaths));
    }
}
