@using System.Collections.Specialized
@using Microsoft.JSInterop

@implements IDisposable

@inject IJSRuntime Js



@* A component that shows text entries in a console-like view environment. *@
@* Text lines are delivered either by setting the 'Items' property to an IEnumerable<string> or IEnumerable<ConsoleLine> *@
@* The 'Items' property supports collections that implement INotifyCollectionChanged. *@
@* TODO: Currently, to be thread-safe, this component uses a lock to keep the internal collection undisturbed, while rendering *@
@* TODO: This currently costs a little performance and much memory because we effectively have two copies of the delivered information (both in 'Items' and '_internalCollection')*@

<div @ref="_logContainer" class="log-container @_additionalClass">

    @lock (_internalCollectionLock) {
        @foreach (var logMessage in _internalCollection) {
            <div class="log-line">
                @foreach (var textPart in logMessage.Parts) {
                    <span class="log-text-part" style="color: @(textPart.Color ?? "rgb(204, 204, 204)")">
                        @textPart.Text
                    </span>
                }
            </div>
        }
    }
</div>


<script>

    window.blazorExtensions = window.blazorExtensions || {};

    window.blazorExtensions.console = {

        scrollToBottom: (element) => {
            if (element) {
                element.scrollTop = element.scrollHeight;
            }
        }
    }
</script>



@code {

    [Parameter]
    public object? Items {
        get => _items;
        set {
            OnItemsChanging();
            _items = value;
            OnItemsChanged();
        }
    }
    private object? _items;

    [Parameter]
    public bool Autoscroll { get; set; } = false;

    [Parameter(CaptureUnmatchedValues = true)]
    public IDictionary<string, object>? AdditionalAttributes { get; set; }

    private ElementReference _logContainer;
    private IList<ConsoleLine> _internalCollection = [];
    private readonly object _internalCollectionLock = new();
    private string _additionalClass = "";



    /// <summary>
    ///
    /// </summary>
    protected override void OnParametersSet() {
        // Get the "class" attribute, if given
        if (AdditionalAttributes != null && AdditionalAttributes.TryGetValue("class", out var attribute)) {
            _additionalClass = attribute.ToString() ?? string.Empty;
        }

        base.OnParametersSet();
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="firstRender"></param>
    /// <returns></returns>
    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (Autoscroll) {
            await Js.InvokeVoidAsync("blazorExtensions.console.scrollToBottom", _logContainer);
        }

    }



    /// <summary>
    ///
    /// </summary>
    private void OnItemsChanging() {
        // The Items property is changing
        // We need to unsubscribe from the old collection to avoid memory leaks
        if (_items is INotifyCollectionChanged coll) {
            coll.CollectionChanged -= OnItemCollectionChanged;
        }

        // We do not clear the internal collection, because it will be overwritten in the OnItemsChanged method
    }



    /// <summary>
    ///
    /// </summary>
    private void OnItemsChanged() {
        // The Items property has changed
        switch (Items) {
            // First, we check if the new Items property is an IEnumerable<string> that we can use to render the log messages
            case IEnumerable<string> coll: {
                    var consoleLines = ConvertStringsToConsoleLines(coll);
                    _internalCollection = consoleLines.ToList();
                    break;
                }
            case IEnumerable<ConsoleLine> coll:
                _internalCollection = coll.ToList();
                break;
        }


        // If the new Items property is also an INotifyCollectionChanged, we subscribe to the CollectionChanged event
        if (_items is INotifyCollectionChanged notifyCollection) {
            notifyCollection.CollectionChanged += OnItemCollectionChanged;
        }
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="collection"></param>
    /// <returns></returns>
    private IEnumerable<ConsoleLine> ConvertStringsToConsoleLines(IEnumerable<string> collection) {
        return collection.Select(x => new ConsoleLine(x));
    }



    /// <summary>
    ///
    /// </summary>
    /// <param name="sender"></param>
    /// <param name="evtArgs"></param>
    private void OnItemCollectionChanged(object? sender, NotifyCollectionChangedEventArgs evtArgs) {
        switch (evtArgs.Action) {
            // Check if new items have been added, if yes, add them to the internal collection
            case NotifyCollectionChangedAction.Add: {
                    lock (_internalCollectionLock) {
                        foreach (var item in evtArgs.NewItems!) {
                            switch (item) {
                                case string str:
                                    _internalCollection.Add(new ConsoleLine(str));
                                    break;
                                case ConsoleLine line:
                                    _internalCollection.Add(line);
                                    break;
                            }
                        }
                    }
                    break;
                }
            // Check if items have been removed, if yes, remove them from the internal collection
            case NotifyCollectionChangedAction.Remove:
                break;
        }

        InvokeAsync(StateHasChanged);
    }


    void IDisposable.Dispose() {
        if (_items is INotifyCollectionChanged coll) {
            coll.CollectionChanged -= OnItemCollectionChanged;
        }
    }
}
